# Generated by Django 3.2.4 on 2023-05-23 10:39

import datetime
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='BuildQueryOpearator',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='DuplicateorFraudPanelistID',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('panelist_id', models.CharField(blank=True, max_length=200, null=True)),
                ('project_id', models.CharField(blank=True, max_length=100, null=True)),
                ('supplier_id', models.CharField(blank=True, max_length=100, null=True)),
                ('supplier_name', models.CharField(blank=True, max_length=100, null=True)),
                ('status', models.CharField(blank=True, max_length=100, null=True)),
                ('threat_potential', models.CharField(blank=True, max_length=100, null=True)),
                ('threat_potential_score', models.CharField(blank=True, max_length=100, null=True)),
                ('duplicate_score', models.CharField(blank=True, max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Prescreener',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=100, null=True)),
                ('link', models.URLField(blank=True, null=True)),
                ('generated_link', models.URLField(blank=True, null=True)),
                ('enable_otp_verification', models.BooleanField(blank=True)),
                ('project', models.CharField(blank=True, max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='QuestionCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=100, null=True)),
                ('company', models.CharField(blank=True, max_length=100, null=True)),
                ('survey_category_image', models.FileField(blank=True, null=True, upload_to='surveycategory/')),
            ],
        ),
        migrations.CreateModel(
            name='QuestionLibrary',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('language', models.CharField(blank=True, max_length=100, null=True)),
                ('position_value', models.CharField(blank=True, max_length=100, null=True)),
                ('question_id', models.CharField(blank=True, max_length=100, null=True)),
                ('question_name', models.TextField(blank=True, null=True)),
                ('question_text', models.CharField(blank=True, max_length=100, null=True)),
                ('instruction', models.CharField(blank=True, max_length=100, null=True)),
                ('is_base_question', models.BooleanField(default=True)),
                ('question_category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='question_category', to='prescreener.questioncategory')),
            ],
        ),
        migrations.CreateModel(
            name='QuestionOperator',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=100, null=True)),
                ('company', models.CharField(blank=True, max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='QuestionType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=100, null=True)),
                ('company', models.CharField(blank=True, max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='UserSurvey',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('panelist_id', models.CharField(blank=True, max_length=100, null=True)),
                ('status', models.CharField(blank=True, max_length=100, null=True)),
                ('first_name', models.CharField(blank=True, max_length=100, null=True)),
                ('last_name', models.CharField(blank=True, max_length=100, null=True)),
                ('email', models.CharField(blank=True, max_length=100, null=True)),
                ('password', models.CharField(blank=True, max_length=100)),
                ('dob', models.CharField(blank=True, max_length=100, null=True)),
                ('gender', models.CharField(blank=True, max_length=100, null=True)),
                ('is_email_verified', models.BooleanField(default=False)),
                ('tid', models.TextField(blank=True, null=True)),
                ('campaign_id', models.IntegerField(blank=True, null=True)),
                ('supplier_id', models.IntegerField(blank=True, null=True)),
                ('date_of_joining', models.DateField(blank=True, default=datetime.date.today, null=True)),
                ('city', models.CharField(blank=True, max_length=100, null=True)),
                ('state', models.CharField(blank=True, max_length=100, null=True)),
                ('country', models.CharField(blank=True, max_length=100, null=True)),
                ('age', models.IntegerField(blank=True, null=True)),
                ('profile_image', models.FileField(blank=True, null=True, upload_to='profileImage/')),
            ],
        ),
        migrations.CreateModel(
            name='QuestionTypeOperator',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_operator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='prescreener.questionoperator')),
                ('question_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='prescreener.questiontype')),
            ],
        ),
        migrations.CreateModel(
            name='QuestionLibraryWithLanguages',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('base_queestion', models.ForeignKey(blank=True, max_length=100, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='base_queestion', to='prescreener.questionlibrary')),
                ('created_question_language', models.ForeignKey(blank=True, max_length=100, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='created_question_language', to='prescreener.questionlibrary')),
            ],
        ),
        migrations.AddField(
            model_name='questionlibrary',
            name='question_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='question_type', to='prescreener.questiontype'),
        ),
        migrations.CreateModel(
            name='QuestionChoice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('option_id', models.CharField(blank=True, max_length=100, null=True)),
                ('name', models.CharField(blank=True, max_length=100, null=True)),
                ('text', models.CharField(blank=True, max_length=100, null=True)),
                ('question_library', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='question_choice', to='prescreener.questionlibrary')),
            ],
        ),
        migrations.CreateModel(
            name='PrescreenerQuestionLibrary',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('prescreener', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='prescreener', to='prescreener.prescreener')),
                ('question_library', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='question_library', to='prescreener.questionlibrary')),
            ],
        ),
        migrations.CreateModel(
            name='ExternalSamplePanelistAnswer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('panelist_id', models.CharField(blank=True, max_length=200, null=True)),
                ('answers', models.TextField(blank=True, null=True)),
                ('question_library', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='prescreener.questionlibrary')),
            ],
        ),
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answers', models.TextField(blank=True, null=True)),
                ('question_library', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='questions_library', to='prescreener.questionlibrary')),
                ('user_survey', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='prescreener.usersurvey')),
            ],
        ),
    ]
